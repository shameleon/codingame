import sys
from time import time

from vox_codei_episode2 import VoxCodeiEpisode2

"""Tests adapted from codingame.com Puzzle Vox Codei episode 2"""


class TestVoxCodei2:
    def __init__(self):
        self.map_dimensions = "12 9"

    def get_map_dimensions(self):
        return self.map_dimensions
    
    def get_round_map(self, turn):
        rounds_and_bombs = ' '.join([str(self.rounds_and_bombs[0] - turn), 
                                     str(self.rounds_and_bombs[1])
                                     ])
        return rounds_and_bombs, self.map_rows[turn]

class Test09(TestVoxCodei2):
    """Patience, 3 bombs"""
    def __init__(self):
        super().__init__()
        self.a_solution = {88: "5 4", 83: "10 2", 86: "2 7"}
        self.rounds_and_bombs = [90, 3]
        self.map_rows = {0: ['@...........', '.....@....@.', '@...........', '.....@......', '..@.@.@.@...', '.....@......', '............', '.@...@......', '.........@.@'],
                         1: ['.@..........', '.....@....@.', '............', '@....@......', '..@.@.@.@...', '.....@......', '............', '.@...@.....@', '........@...'],
                         2: ['..@.........', '.....@....@.', '............', '.....@......', '@.@.@.@.@...', '.....@......', '...........@', '.@...@......', '.......@....'],
                         3: ['...@........', '.....@....@.', '............', '.....@......', '..@.@.@.@...', '@....@.....@', '............', '.@...@......', '......@.....']
                         }


class Test08(TestVoxCodei2):
    """Indestructible nodes, 4 bombs"""
    def __init__(self):
        super().__init__()
        self.a_solution = {}
        self.rounds_and_bombs = [60, 4]
        self.map_rows = {0: ['........@...', '.......@....', '.#.#.#@#.#.#', '.....@......', '#.#.@#..#.#.', '...@........', '..@.........', '.@..........', '@...........'],
                         1: ['.......@....', '........@...', '.#.#.#.#.#.#', '....@.@.....', '#.#..#..#.#.', '..@.........', '...@........', '............', '.@..........'],
                         2: ['......@.....', '.........@..', '.#.#@#.#.#.#', '.......@....', '#.#..#@.#.#.', '.@..........', '....@.......', '.@..........', '..@.........'],
                         3: ['.....@......', '....@.....@.', '.#.#.#.#.#.#', '........@...', '#.#..#..#.#.', '@.....@.....', '.@...@......', '............', '...@........'],
                         }

class Test07(TestVoxCodei2):
    """4 moving nodes, 1 bombs"""
    def __init__(self):
        super().__init__()
        self.a_solution = {31: "6 3"}
        self.rounds_and_bombs = [60, 9]
        self.map_rows = {0: ['........@...', '.......@....', '.#....@...#.', '.....@......', '....@.......', '...@........', '..@.........', '#@.......#..', '@...........'],
                         1: ['.......@....', '........@...', '.#........#.', '....@.@.....', '............', '..@.........', '...@........', '#.@......#..', '.@..........'],
                         2: ['......@.....', '.........@..', '.#..@.....#.', '.......@....', '......@.....', '.@..........', '....@.......', '#..@.....#..', '..@.........'],
                         3: ['.....@......', '....@.....@.', '.#........#.', '........@...', '............', '@.....@.....', '.....@......', '#...@....#..', '...@........']
                         }


class Test06(TestVoxCodei2):
    """4 moving nodes, 1 bombs"""
    def __init__(self):
        super().__init__()
        self.a_solution = {31: "6 3"}
        self.rounds_and_bombs = [55, 1]
        self.map_rows = {0: ['#..........#', '............', '....#.@#....', '..@.........', '...#....#...', '...........@', '....#..#....', '............', '#....@.....#'],
                         1: ['#..........#', '............', '....#..#....', '...@..@.....', '...#....#...', '..........@.', '....#..#....', '.....@......', '#..........#'],
                         2: ['#..........#', '............', '....#..#....', '....@.......', '...#..@.#...', '.........@..', '....#@.#....', '............', '#..........#'],
                         3: ['#..........#', '............', '....#..#....', '.....@......', '...#....#...', '.....@@.@...', '....#..#....', '............', '#..........#']
                         }


class Test05(TestVoxCodei2):
    """Indestructible nodes, 4 bombs"""
    def __init__(self):
        super().__init__()
        self.a_solution = {}
        self.rounds_and_bombs = [99, 9]
        self.map_rows = {0: ['.#.@........', '..#......@..', '......@..#..', '.....@....#.', '....@...#...', '...@.......#', '..@......#..', '.@......#...', '@......#....'],
                         1: ['.#..@.......', '..#.....@...', '.......@.#..', '......@...#.', '.....@..#...', '....@......#', '...@.....#..', '..@.....#...', '.@.....#....'],
                         2: ['.#...@......', '..#....@....', '........@#..', '.......@..#.', '......@.#...', '.....@.....#', '....@....#..', '...@....#...', '..@....#....'],
                         3: ['.#....@.....', '..#...@.....', '.......@.#..', '........@.#.', '.......@#...', '......@....#', '.....@...#..', '....@...#...', '...@...#....'],
                         }


class Test03(TestVoxCodei2):
    """Indestructible nodes, 4 bombs"""
    def __init__(self):
        super().__init__()
        self.a_solution = {}
        self.rounds_and_bombs = [50, 7]
        self.map_rows = {0: ['..@....@....', '...........@', '.@..........', '.....@......', '@...........', '............', '............', '.@..........', '............'],
                         1: ['..@........@', '.......@....', '@...........', '............', '.@...@......', '............', '............', '..@.........', '............'],
                         2: ['..@.........', '...........@', '.@.....@....', '............', '..@.........', '.....@......', '............', '...@........', '............'],
                         3: ['..@.........', '............', '..@........@', '.......@....', '...@........', '............', '.....@......', '....@.......', '............']
                         }

class Test02(TestVoxCodei2):
    """Indestructible nodes, 4 bombs"""
    def __init__(self):
        super().__init__()
        self.a_solution = {}
        self.rounds_and_bombs = [30, 2]
        self.map_rows = {0: ['#..........#', '............', '............', '............', '.....@......', '............', '............', '............', '#.@........#'],
                         1: ['#..........#', '............', '............', '............', '......@.....', '............', '............', '..@.........', '#..........#'],
                         2: ['#..........#', '............', '............', '............', '.......@....', '............', '..@.........', '............', '#..........#'],
                         3: ['#..........#', '............', '............', '............', '........@...', '..@.........', '............', '............', '#..........#']
                         }


class Test01(TestVoxCodei2):
    """Indestructible nodes, 4 bombs"""
    def __init__(self):
        super().__init__()
        self.a_solution = {}
        self.rounds_and_bombs = [30, 1]
        self.map_rows = {0: ['............', '............', '............', '............', '.@..........', '............', '............', '............', '............'],
                         1: ['............', '............', '............', '............', '..@.........', '............', '............', '............', '............'],
                         2: ['............', '............', '............', '............', '...@........', '............', '............', '............', '............'],
                         3: ['............', '............', '............', '............', '....@.......', '............', '............', '............', '............'],
                         }

def main():
    tests = [Test01, Test02, Test03, Test05, Test06, Test07, Test08, Test09]
    for test in tests:
        current = test()
        print("-" * 50, type(current).__name__, file=sys.stderr, flush=True)
        width, height = map(int, current.get_map_dimensions().split())
        time_start = time()
        vox = VoxCodeiEpisode2(width, height)
        for turn in range(4):
            rounds_bombs, map_rows = current.get_round_map(turn)
            rounds, bombs = map(int, rounds_bombs.split())
            place_a_bomb = vox.update(rounds, bombs, map_rows)
        if place_a_bomb:
            print(place_a_bomb)
        print(round((time() - time_start) * 1000000) / 1000, "ms", file=sys.stderr, flush=True)


if __name__ == '__main__':
    sys.exit(main())


